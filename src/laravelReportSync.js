// Laravel Report Sync Service
// Ensures reports generated by WhatsApp Bot match Laravel Dashboard

const axios = require('axios');
const logger = require('./logger');

class LaravelReportSync {
    constructor() {
        this.laravelUrl = process.env.LARAVEL_DASHBOARD_URL || 'http://127.0.0.1:8000';
        this.enabled = process.env.LARAVEL_INTEGRATION === 'true';
    }

    /**
     * Check if Laravel integration is enabled
     */
    isEnabled() {
        return this.enabled;
    }

    /**
     * Get transactions from Laravel for report comparison
     */
    async getTransactionsFromLaravel(startDate, endDate, location = null) {
        if (!this.isEnabled()) {
            return { success: false, reason: 'integration_disabled' };
        }

        try {
            const params = {
                start_date: startDate,
                end_date: endDate
            };

            if (location) {
                params.location = location;
            }

            const response = await axios.get(`${this.laravelUrl}/api/transactions`, {
                params,
                timeout: 10000
            });

            return { success: true, data: response.data };
        } catch (error) {
            logger.error('Failed to get transactions from Laravel:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * Validate report data consistency between Bot and Laravel
     */
    async validateReportConsistency(botData, startDate, endDate, location = null) {
        if (!this.isEnabled()) {
            return { consistent: true, reason: 'integration_disabled' };
        }

        try {
            const laravelResult = await this.getTransactionsFromLaravel(startDate, endDate, location);
            
            if (!laravelResult.success) {
                logger.warn('Cannot validate report consistency - Laravel data unavailable');
                return { consistent: true, reason: 'laravel_unavailable' };
            }

            const laravelData = laravelResult.data;
            
            // Compare transaction counts
            const botCount = botData.length;
            const laravelCount = laravelData.length;
            
            if (botCount !== laravelCount) {
                logger.warn(`Report inconsistency detected: Bot=${botCount}, Laravel=${laravelCount} transactions`);
                return { 
                    consistent: false, 
                    reason: 'count_mismatch',
                    botCount,
                    laravelCount
                };
            }

            // Compare total amounts
            const botTotal = botData.reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);
            const laravelTotal = laravelData.reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);
            
            if (Math.abs(botTotal - laravelTotal) > 0.01) { // Allow small floating point differences
                logger.warn(`Report amount inconsistency: Bot=${botTotal}, Laravel=${laravelTotal}`);
                return { 
                    consistent: false, 
                    reason: 'amount_mismatch',
                    botTotal,
                    laravelTotal
                };
            }

            logger.info('Report data consistency validated successfully');
            return { consistent: true, botCount, laravelCount, botTotal, laravelTotal };

        } catch (error) {
            logger.error('Error validating report consistency:', error.message);
            return { consistent: true, reason: 'validation_error', error: error.message };
        }
    }

    /**
     * Sync report summary to Laravel (optional - for dashboard display)
     */
    async syncReportSummary(reportData) {
        if (!this.isEnabled()) {
            return { success: false, reason: 'integration_disabled' };
        }

        try {
            const payload = {
                type: 'daily_report',
                date: reportData.date,
                apartment: reportData.apartment,
                summary: {
                    total_transactions: reportData.totalTransactions,
                    total_amount: reportData.totalAmount,
                    total_commission: reportData.totalCommission,
                    unique_customers: reportData.uniqueCustomers
                },
                generated_by: 'whatsapp_bot',
                generated_at: new Date().toISOString()
            };

            const response = await axios.post(`${this.laravelUrl}/api/reports/sync`, payload, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'WhatsApp-Bot-KR/1.0'
                },
                timeout: 10000
            });

            logger.info('Report summary synced to Laravel successfully');
            return { success: true, response: response.data };

        } catch (error) {
            logger.error('Failed to sync report summary to Laravel:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * Get Laravel dashboard URL for reports
     */
    getDashboardUrl(reportType = 'daily', date = null) {
        if (!this.isEnabled()) {
            return null;
        }

        let url = `${this.laravelUrl}/reports`;
        
        if (reportType === 'daily' && date) {
            url += `/daily?date=${date}`;
        } else if (reportType === 'monthly' && date) {
            url += `/monthly?month=${date}`;
        }

        return url;
    }

    /**
     * Check Laravel dashboard availability
     */
    async checkDashboardAvailability() {
        if (!this.isEnabled()) {
            return { available: false, reason: 'integration_disabled' };
        }

        try {
            const response = await axios.get(`${this.laravelUrl}/api/health`, {
                timeout: 5000
            });

            if (response.status === 200) {
                return { available: true, data: response.data };
            } else {
                return { available: false, reason: 'unexpected_status', status: response.status };
            }

        } catch (error) {
            return { available: false, reason: 'connection_error', error: error.message };
        }
    }

    /**
     * Format report footer with Laravel dashboard link
     */
    formatReportFooter(reportType = 'daily', date = null) {
        if (!this.isEnabled()) {
            return '\nüìä WhatsApp Bot Report';
        }

        const dashboardUrl = this.getDashboardUrl(reportType, date);
        
        return `\nüìä WhatsApp Bot Report
üåê Dashboard: ${dashboardUrl}
üì± Data tersinkronisasi dengan Laravel Dashboard`;
    }

    /**
     * Log report generation with Laravel context
     */
    async logReportGeneration(reportType, date, transactionCount, totalAmount) {
        if (!this.isEnabled()) {
            return;
        }

        try {
            const dashboardCheck = await this.checkDashboardAvailability();
            
            logger.info('Report generated', {
                type: reportType,
                date: date,
                transaction_count: transactionCount,
                total_amount: totalAmount,
                laravel_dashboard: dashboardCheck.available ? 'available' : 'unavailable',
                dashboard_url: this.getDashboardUrl(reportType, date)
            });

        } catch (error) {
            logger.error('Error logging report generation:', error.message);
        }
    }
}

module.exports = new LaravelReportSync();
